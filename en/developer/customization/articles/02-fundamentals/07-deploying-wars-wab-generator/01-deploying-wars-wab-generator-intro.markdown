---
header-id: deploying-wars-wab-generator
---

# Deploying WARs (WAB Generator)

[TOC levels=1-4]

You can create applications for @product@ as Java EE-style Web Application
ARchive (WAR) artifacts or as Java ARchive (JAR) OSGi bundle artifacts. Bean
Portlets, PortletMVC4Spring Portlets, and JSF Portlets must be packaged as WAR
artifacts because their frameworks are designed for Java EE. Therefore, they
expect a WAR layout and require Java EE resources such as the `WEB-INF/web.xml`
descriptor.

Liferay provides a way for these WAR-styled plugins to be deployed and treated
like OSGi modules by Liferay's OSGi runtime. They can be converted to *WABs*.

@product@ supports the OSGi Web Application Bundle (WAB) standard for deployment
of Java EE style WARs. Simply put, a WAB is an archive that has a WAR layout and
contains a `META-INF/MANIFEST.MF` file with the `Bundle-SymbolicName` OSGi
directive. A WAB is an OSGi bundle. Although the project source has a WAR
layout, the artifact filename may end with either the `.jar` or `.war`
extension.

Liferay only supports the use of WABs that have been auto-generated by the WAB
Generator. The WAB Generator transforms a traditional WAR-style plugin into a
WAB during deployment. So what exactly does the WAB Generator do to a WAR file
to transform it into a WAB?

The WAB Generator detects packages referenced in the plugin WAR's JSPs,
descriptor files, and classes (in `WEB-INF/classes` and embedded JARs). The
descriptor files include `web.xml`, `liferay-web.xml`, `portlet.xml`,
`liferay-portlet.xml`, and `liferay-hook.xml`. The WAB Generator verifies
whether the detected packages are in the plugin's `WEB-INF/classes` folder or in
an embedded JAR in the `WEB-INF/lib` folder. Packages that aren't found in
either location are added to an `Import-Package` OSGi header in the WAB's
`META-INF/MANIFEST.MF` file. 

To import a package that is only referenced in the following types of locations,
you must add an `Import-Package` OSGi header to the plugin's
`WEB-INF/liferay-plugin-package.properties` file and add the package to that
header's list of values. 

-   Unrecognized descriptor file
-   Custom or unrecognized descriptor element or attribute
-   Reflection code
-   Class loader code

## WAR versus WAB Structure 

The WAB folder structure and WAR folder structure differ. Consider the following
folder structure of a WAR-style portlet.

**WAR**

-   `my-war-portlet`
    -   `src`
        -   `main`
            -   `java`
            -   `webapp`
                -   `WEB-INF`
                    -   `classes`
                    -   `lib`
                    -   `resources`
                    -   `views`
                    -   `liferay-display.xml`
                    -   `liferay-plugin-package.properties`
                    -   `liferay-portlet.xml`
                    -   `portlet.xml`
                    -   `web.xml`

When a WAR-style portlet is deployed to @product@ and processed by the WAB
Generator, the portlet's folder structure is transformed. 

**WAB**

-   `my-war-portlet-that-is-now-a-wab`
    -   `META-INF`
        -   `MANIFEST.MF`
    -   `WEB-INF`
        -   `classes`
        -   `lib`
        -   `resources`
        -   `views`
        -   `liferay-display.xml`
        -   `liferay-plugin-package.properties`
        -   `liferay-portlet.xml`
        -   `portlet.xml`
        -   `web.xml`

The major difference is the addition of the `META-INF/MANIFEST.MF` file. The WAB
Generator automatically generates an OSGi-ready manifest file. If you want to
affect the content of the manifest file, you can place bnd directives and OSGi
headers directly into your plugin's `liferay-plugin-package.properties` file.

| **Note:** Adding a `bnd.bnd` file or a build-time plugin (e.g.,
| `bnd-maven-plugin`) to your WAR plugin is pointless, because the generated WAB
| cannot use them. 

## Deploying a WAR 

To deploy a WAB based on your WAR plugin, copy your WAR plugin to your @product@
instance's `deploy/` folder in your  [`[Liferay
Home]`](/docs/7-2/deploy/-/knowledge_base/d/liferay-home). 

## Saving a Copy of the WAB

Optionally, save the WAB to a local folder. This gives you the opportunity to
inspect the generated WAB. To store generated WABs, add the following portal
properties to a `[Liferay Home]/portal-ext.properties` file. Then restart
@product@:

```properties
module.framework.web.generator.generated.wabs.store=true
module.framework.web.generator.generated.wabs.store.dir=${module.framework.base.dir}/wabs
```

These properties instruct the WAB generator to store generated WABs in your
Liferay instance's `osgi/wabs/` folder. The generated WABs have the same
structure as the example WAB structure listed above. The
[Module Framework Web Application Bundles](@platform-ref@/7.2-latest/propertiesdoc/portal.properties.html#Module%20Framework%20Web%20Application%20Bundles)
properties section explains more details. 

Awesome! You have deployed your WAR plugin as a WAB and you know how to save a
copy of the WAB to examine it!

## Related Topics 

[Creating a Project](/docs/7-2/reference/-/knowledge_base/r/creating-a-project)

[Deploying a Project](/docs/7-2/reference/-/knowledge_base/r/deploying-a-project)

[Developing Web Front-Ends](/docs/7-2/appdev/-/knowledge_base/a/web-front-ends)
